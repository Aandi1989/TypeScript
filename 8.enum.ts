/*Перечисления - это удобный способ создания наборов значений, количество и названия которых известны заранее и не должны изменяться. 
Для создания перечислений используется ключевое слово enum. Cоздадим перечисление, содержащее название пор года:*/ 
enum Season { Winter, Spring, Summer, Autumn };

/*Данные в перечислениях можно получать по числовым ключам, подобно элементам массива:*/ 
let current: string = Season[0];
console.log(current); // 'Winter'

/*Mожно по названию элемента получить его ключ:*/
let current2: number = Season.Winter;
console.log(current2); // 0

/*Каждое перечисление создает свой собственный тип данных. Давайте для примера для переменной,
 хранящей текущий сезон присвоим тип Season:*/ 
 let current3: Season;
/*Запишем в нашу переменную номер сезона:*/  
current3 = Season.Winter;
console.log(current); // 0
/*Можно указать номер сезона вручную:*/ 
current3 = 3;
/*А вот если попытаться записать данные другого типа, например, строку, то будет ошибка:*/ 
current3 = 'str'// будет ошибка

/*Нумерация номеров не обязательно должна быть с нуля. Можно указать ключи в явном виде следующим образом:*/
enum Season4 { Winter = 1, Spring = 2, Summer = 3, Autumn = 4 };
let current4: Season = Season.Winter;
console.log(current); // выведет 1

/*Не обязательно указывать ключи всем элементам. Достаточно указать его первому элементу и 
ключи следующих элементов будут увеличиваться по порядку*/
enum Season5 { Winter = 1, Spring, Summer, Autumn };
let current5: Season = Season.Summer;
console.log(current); // выведет 3

/*Ключами могут быть не только числа, но и строки:*/ 
enum Season6 { 
	Winter = 'Зима', 
	Spring = 'Весна',
	Summer = 'Лето', 
	Autumn = 'Осень'
};
let current6: Season = Season.Summer;
console.log(current); // 'Лето'

/*Тип enum или перечисление позволяет определить набор именнованных констант, которые описывают определенные состояния.
"Когда использовать enum и стоит ли это делать с учетом закрепившейся привычки работы со статическими классами и константами?".
Ответ очевиден — безусловно стоит применять тогда, когда нужна двухсторонняя ассоциация строкового ключа с его числовым или 
строковым значением (проще говоря, карта строковый ключ — числовое значение_числовой ключ — строковое значение_).
Кроме того, enum лучше всего подходит для определения дискриминантных полей речь о которых пойдет позже.*/ 