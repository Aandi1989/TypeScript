/*В TypeScript, as const используется для определения литерального (неизменяемого) типа значения. 
Он указывает компилятору, что вы хотите зафиксировать точный тип значения и запретить его изменение в дальнейшем. 
Вот некоторые примеры и применения as const:

1.Запись литерального типа:
Применение as const после значения позволяет указать, что это значение должно рассматриваться как точный литералный тип. Например:*/
const myValue = "Hello" as const;
/*Тип myValue - "Hello", а не строка string
В этом примере myValue имеет тип "Hello", а не более общий тип string. Это означает, 
что значение myValue может быть только строкой "Hello" и не может быть изменено на другую строку.

2.Фиксация типа для объектов и массивов:
Вы также можете использовать as const, чтобы зафиксировать типы вложенных объектов и массивов. Например:*/
const myObject = {
    prop1: "Value 1",
    prop2: "Value 2",
  } as const;
  // Тип myObject - { readonly prop1: "Value 1"; readonly prop2: "Value 2"; }
const myArray = [1, 2, 3] as const;
/*Тип myArray - readonly [1, 2, 3]
В этих примерах myObject и myArray имеют только для чтения (readonly) свойства и элементы соответственно. 
Это означает, что их структура и значения не могут быть изменены.

3.Применение синтаксиса readonly:
as const также может использоваться вместе со синтаксисом readonly, чтобы указать, 
что все свойства объекта или элементы массива должны быть только для чтения. Например:*/ 
const myObject2 = {
    prop1: "Value 1",
    prop2: "Value 2",
  } as const;
  // Тип myObject2 - { readonly prop1: "Value 1"; readonly prop2: "Value 2"; }
const myArray2 = [1, 2, 3] as const;
/*Тип myArray2 - readonly [1, 2, 3]
В этом примере все свойства myObject и элементы myArray становятся только для чтения, благодаря использованию as const.
Использование as const позволяет точно определить типы литеральных значений и зафиксировать их, 
предотвращая неожиданные изменения. Оно полезно, когда вам нужно создать неизменяемые значения или 
когда точный тип значения играет важную роль в вашем коде.*/ 
