/*Ключевое слово type в TypeScript используется для создания пользовательских типов данных. 
Оно позволяет определить алиасы типов, объединять и пересекать типы, а также создавать универсальные типы
1.Определение алиасов типов:
С помощью type можно создавать алиасы (псевдонимы) для существующих типов или для пользовательских типов. Например:*/ 
type MyString = string;
type MyNumberArray = number[];
type MyObject = { name: string; age: number };
/*2.Объединение (Union) типов:
type позволяет объединять несколько типов в один с помощью оператора |. Например:*/ 
type MyType = string | number;
/*Это означает, что переменная типа MyType может быть либо строкой, либо числом.
3.Пересечение (Intersection) типов:
type также позволяет объединять несколько типов в один с помощью оператора &. Например:*/ 
type Person = { name: string } & { age: number };
/*В этом примере тип Person будет иметь свойства name и age, объединенные из двух разных типов.*/ 
/*4.Универсальные типы (Generics):
type поддерживает использование универсальных параметров, которые позволяют создавать обобщенные типы. Например:*/ 
type Pair<T> = {
    first: T;
    second: T;
  };
const pair: Pair<number> = { first: 1, second: 2 };  
/*В этом примере Pair<T> - это универсальный тип, который может принимать различные типы данных.*/ 
/*5.Расширение типов:
С помощью type можно расширять существующие типы с помощью оператора &. Например:*/ 
type ExtendedType = BaseType & { additionalProp: number };
/*В этом примере тип ExtendedType расширяет тип BaseType, добавляя к нему свойство additionalProp.*/ 