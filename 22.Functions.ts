/*Количество параметров функции в TypeScript
В TypeScript при вызове в функцию должно передаваться ровно столько значений, сколько в ней определено параметров.
Пусть у нас есть функция, которая параметром принимает имя и фамилию пользователя и возвращает их в виде строки:*/ 
function func(first: string, last: string) {
	return first + ' ' + last;
}
/*Вызовем нашу функцию с разным количеством параметров:*/ 
func('john');               // ошибка, мало параметров
func('john', 'smit', 'xx'); // ошибка, много параметров
func('john', 'smit');       // работает


/*Необязательные параметры функций в TypeScript
Можно сделать так, чтобы функция принимала переменное число параметров. 
Для этого нужно объявить часть параметров (или все) необязательными.
Чтобы указать, что параметр является необязательным, после его имени нужно поставить знак вопроса.
Объявим в нашей функции фамилию необязательным параметром:*/ 
function func2(first: string, last?: string) {
	return first + ' ' + last;
}
/*Если при вызове функции необязательный параметр не будет задан, он примет значение undefined. 
Mодифицируем нашу функцию с учетом этого:*/ 
function func3(first: string, last?: string) {
	if (last) {
		return first + ' ' + last;
	} else {
		return first;
	}
}
/*Воспользуемся нашей функцией. Вызовем ее с двумя параметрами:*/ 
func3('john', 'smit'); // вернет 'john smit'
/*Вызовем ее с одним параметром:*/ 
func3('john'); // вернет 'john'

/*Значения параметров по умолчанию в TypeScript
Необязательным параметрам можно также назначать значение по умолчанию. 
Для примера тем юзерам, у которых не задана фамилия, присвоим ей значение 'snow':*/ 
function func4(first: string, last: string = 'snow') {
	return first + ' ' + last;
}
/*Давайте теперь воспользуемся нашей функцией. Вызовем ее с двумя параметрами:*/ 
func4('john', 'smit'); // вернет 'john smit'
/*Вызовем ее с одним параметром:*/ 
func4('john'); // вернет 'john snow'


/*Rest параметры функции в TypeScript
В TypeScript можно также работать с rest параметрами функций. Для этого переменную, 
в которую складываются параметры следует объявить массивом:*/ 
function func5(...rest: number[]): number {
	console.log(rest);
}
/*Проверим работу нашей функции:*/ 
func5(1, 2, 3); // выведет [1, 2, 3]


/*Тип функций в TypeScript
В JavaScript могут быть переменные, хранящие функции. В этом случае TypeScript позволяет нам указать, 
что эта переменная имеет тип "функция".Тип функции представляет собой комбинацию типов параметров и типа возвращаемого значения. 
Эта комбинация называется сигнатурой функции.Чтобы указать переменной тип функции, нужно в круглых скобках 
перечислить параметры и их типы, а после стрелки => указать тип возвращаемого значения.
Объявим какую-нибудь переменную как содержащую функцию:*/ 
let func6: (x: number, y: number) => number;
/*Запишем в эту переменную функцию заданного типа:*/ 
func6 = function(a: number, b: number): number {
	return a + b;
};
/*Свой тип с функцией
Иногда удобнее объявить отдельный тип, который будет содержать описание параметров и возвращаемого значения функции:*/ 
type Func = (x: number, y: number) => number;
/*Затем можно будет объявлять функции с таким типом.
Для примера объявим функцию, которая складывает два числа:*/ 
let func7: Func = function(a: number, b: number): number {
	return a + b;
};
/*А теперь объявим функцию, которая умножает два числа:*/
let func8: Func = function(a: number, b: number): number {
	return a * b;
}; 


/*Функции-коллбэки в TypeScript
Для функций коллбэков также можно указывать тип параметров и тип возвращаемого значения:*/ 
function make(num: number, func: (num: number) => number): number {
	return func(num);
}
/*Вызовем нашу функцию с одним коллбэком:*/ 
make(3, function(num: number): number {
	return num ** 2;
});
/*А теперь с другим коллбэком:*/ 
make(3, function(num: number): number {
	return num ** 3;
});


/*Стрелочные функции в TypeScript
В TypeScript также можно делать стрелочные функции. Пусть у нас есть следующая функция:*/ 
let func9 = function(num: number): number {
	return num ** 2;
}
/*Перепишем эту функцию на стрелочный вариант:*/ 
let func10 = (num: number): number => num ** 2;
