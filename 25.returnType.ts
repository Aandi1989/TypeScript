/*ReturnType - это встроенный в TypeScript генерик тип, который позволяет получить тип возвращаемого значения функции. 
Он позволяет получить тип, который представляет значение, которое будет возвращено при вызове функции. 
Вот примеры и применение ReturnType:

1.Получение типа возвращаемого значения функции:
ReturnType позволяет получить тип возвращаемого значения функции. Например:*/ 
function greet(): string {
    return "Hello";
  }
  
  type GreetingReturnType = ReturnType<typeof greet>;
/*Тип GreetingReturnType - string
В этом примере ReturnType<typeof greet> получает тип возвращаемого значения функции greet, 
который в данном случае является строкой.

2.Использование с обобщенными функциями:
ReturnType также может быть использован с обобщенными функциями, чтобы получить тип их возвращаемого значения 
на основе переданных аргументов типов. Например:*/ 
function identity<T>(value: T): T {
    return value;
  }
  
  type IdentityReturnType = ReturnType<typeof identity<number>>;
/*Тип IdentityReturnType - number
В этом примере ReturnType<typeof identity<number>> получает тип возвращаемого значения обобщенной 
функции identity, где тип T является числовым (number).

3.Использование с функциями высшего порядка:
ReturnType может быть использован с функциями высшего порядка, которые возвращают другую функцию. Например:*/ 
function createLogger() {
    return () => {
      console.log("Logging...");
    };
  }
  
  type LoggerReturnType = ReturnType<typeof createLogger>;

/*Тип LoggerReturnType - () => void (функция, не принимающая аргументы и не возвращающая значения)
В этом примере ReturnType<typeof createLogger> получает тип возвращаемой функции из функции createLogger, 
которая не принимает аргументы и не возвращает значения.

Использование ReturnType полезно, когда вам нужно получить тип возвращаемого значения функции и 
использовать его в других местах кода, таких как определение типов переменных, 
параметров или создание новых типов на основе возвращаемых значений функций.*/ 
